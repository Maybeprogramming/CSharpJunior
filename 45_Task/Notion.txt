четверг, 10 апреля 2025, 15:43
Артемий Азаренков
Доработать

+1 - IDamageProvider/IHealable/IClone - методы интерфейсов нигде не используются. 
	Сейчас в них нет смысла

+2 - Name и т.п. свойства - лучше сразу сделайте автореализуемое свойство, 
	убрав поле, а проверку делать в конструкторе класса. 
	Это сильно увеличит читаемость 

	Name =  GetNotEmptyString(name, "Ошибка! Имя не может быть пустым");; и т.д.

+3 - Druid у друида - есть дубляж в виде вызова base.Attack(target); 
	Просто вынесите один из за условие 

+4 - private protected FighterSpecification _baseSpecification; 
	- а зачем поле?

+5 - Методы, использующиеся не во всех дочерних классах, 
	не должны быm, в родительском. нарушение LSP

+6 - TryTakeDamage - а зачем возвращать bool? TryHealing аналогично

+7 - Очередность в классе, сначала поля, конструктор, потом свойства и методы. 
	И только после этого в каждом блоке сортировка от публичного до приватного.
	- чтобы подробнее рассмотреть очередность в классе посмотрите на https://clck.ru/at8vs 

+8 - FightersFactory - супер сложно конечно все выглядит.  
	ConfigurateFightersSpecification есть дубляж. 
	Если выборка, например, жизни, складывается из конкретных чисел, 
	так сделайте метод, в котором эти числа и будут находится, 
	а метод сразу будет нужное значение возвращать, 
	уже станет симпатичнее. 
	Для _nameWarrior и _descriptionWarrior можно сделать или отдельны класс, 
	чтобы сгруппировать данные, или словарь. 
	Ключ - тип, значение - информация. Так же сильно улучшит

?9 - _minHealth и т.д. - поля должны описывать класс и не являться буфером данных

+10 - BeginFightMenu - это не меню, это команды

+11 - BeginFighters - дубляж кода в методе 

+12 - if (randomNumber >= 5) -  магическое число

-------------------------------------------------------------------------------------------------------------------------
Тред в пачке от 11.04.2025
Интересующие вопросики:
1) Не смог найти где нарушена очередность согласно п.7
2) По п.8-9, частично поправил, но вопрос: -почему не могу хранить данные, которые нужны при создании экземпляров бойцов?
3) И вопрос вытекающий из предыдущего: 
"Для _nameWarrior и _descriptionWarrior можно сделать или отдельны класс" 
- а если я значения этих полей перенес в конструктор конкретных классов для упрощения?

Ответ в пачке:
Денис Калужин 11.04.2025 11:42
Здравствуйте. 
1. FightersFactory - приватные методы внизу должны быть. 
2. Если я правильно понял замечание и вопрос, не надо передавать данные между методами через поля. 
Для этого есть входные параметры и возвращаемое значение. 
Подробнее: https://t.me/KaDR_gamedev/56
3. Я думаю, вполне. 

Смысл фабрики в том, что она создает новый объект, а не возвращат имеющийся. 
Создавайте новый список при запросе, а не при создании фабрики.


-------------------------------------------------------------------------------------------------------------------------
пятница, 11 апреля 2025, 23:45
Сергей Куделин

?private protected - в контексте задачи можно использовать просто protected. 
+В Berserk поле _healthDivider не нужно. Можешь использовать как локальную переменную. 
+В FighterSpecification поля не нужны. 
+GetFighters - переменная List<Fighter> _fighters названа не по нотации 


-------------------------------------------------------------------------------------------------------------------------
Оценено в	суббота, 12 апреля 2025, 11:16
Оценено	Артемий Азаренков
Отзыв в виде комментария	
Доработать

+1 - _fightersCatalog[indexGlagiator - 1] - дубляж

+2 - DrowLots - название не описывает метод

+3 - FightersFactory - касаемо этого) В целом, теперь и так можно оставить, 
но для более симпатичного решения предложу сделать отдельный метод по генерации конкретного вэлью. 
Например - GenerateHealth и уже в нем прописаны значения. 
Если я все правильно помню, до этого была прям сильная свалка и фиг поймешь, 
что происходило. Поэтому и предложил такой вариант 

+4 - Healing - методы должны именоваться с глагола в инфинитиве

+5 - bool IsAlive { get; } у IDamageable не используется

+6 - FightersFactory fightersFactory = new FightersFactory(); - можно сразу так в конструкторе 